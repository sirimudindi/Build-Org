<apex:page showHeader="false" controller="LiveChatRemoter">
    <apex:stylesheet value="{!$Resource.SmartsheetLiveAgentChatCSS_20190919}"/>
    <style>

        html {
            padding: 20px;
        }

        body {
            background-color: #ffffff;
            overflow: hidden;
            width: 100%;
            height: 100%;
            padding: 20px;
            margin: 0;
            font-family: "robotoregular", Arial, Helvetica, sans-serif;
            color: #333333;
        }

        #waitingMessage {
            color: white;
            height: 100%;
            width: 100%;
            vertical-align: middle;
            text-align: center;
            display: none;
        }

        #liveAgentClientChat.liveAgentStateWaiting #waitingMessage {
            display: table;
        }

        .liveAgentSaveButton {
            float: left;
        }

        .liveAgentEndButton {
            float: right;
        }

        .liveAgentSaveButton, .liveAgentEndButton, .liveAgentSendButton {
            font-family: "robotoregular", Arial, Helvetica, sans-serif;
            font-weight: normal;
            font-size: .85em;
            display: inline-block;
            cursor: pointer;
            margin: 0;
            border-radius: 3px;
            text-shadow: none;
            text-decoration: none;
            text-align: center;
            transition: all 0.15s ease;
            color: white;
            width: auto !important;
            height: auto !important;
            padding: 0.4em 1em;
            outline: none;
        }

        .liveAgentSaveButton, .liveAgentEndButton {
            z-index: 2;
            width: 80px;
            height: 25px;
            bottom: 5px;
            margin: 0 5px 0 0;
            background: #005ee0;
            border: 2px solid #005ee0;
        }

        .liveAgentSaveButton:hover, .liveAgentEndButton:hover {
            background: #004ab7;
            border: 2px solid #004ab7;
        }

        .liveAgentChatInput {
            height: 30px;
            border: 2px solid #BDBDBD;
            border-radius: 3px;
            /*font-family: "proxima_nova_sbold", "proxima_nova_sbold_cyrillic", Helvetica, Arial, sans-serif;*/
            font-size: .95em;
            line-height: 1.5rem;
            padding: 2px 0 2px 4px;
            background: #fff;
            display: block;
            /*display: inline-block;*/
            width: 100%;
            outline: none;
        }

        .liveAgentSendButton {
            /*display: block;*/
            position: absolute;
            text-shadow: none;
            text-decoration: none;
            text-align: center;
            top: 0;
            right: -67px;
            background: #00bd32;
            border: 2px solid #00bd32;
            /*background-clip: padding-box*/
        }

        .liveAgentSendButton:hover {
            background: #1e806b;
            border: 2px solid #1e806b;
        }

        #liveAgentChatLog {
            padding-right: 15px;
            padding-left: 15px;
            width: auto;
            height: auto;
            top: 0;
            position: absolute;
            overflow-y: auto;
            left: 0;
            right: 0;
            bottom: 30px;
            border: none;
        }

        #liveAgentChatLogText span {
            display: flow-root;
        }

        .client {
            text-align: right;
        }

        span.client + span {
            text-align: right;
            float: right;
        }

        #liveAgentChatLogText .messageText {
            position: relative;
            display: inline-block;
            margin: 0;
            padding: 5px 8px;
            border: 1px solid #E2E8ED;
            -moz-border-radius: 3px;
            border-radius: 3px;
            max-width: 90%;
        }

        .operator .messageText {
            float: left;
            background-color: rgba(29, 157, 224, 0.21);

        }

        .client .messageText {
            float: right;
            background-color: rgba(63, 173, 72, .21);
        }

        span.system {
            padding: 2px 10px;
            clear: both;
            width: 100%;
            -webkit-box-sizing: border-box;
            -moz-box-sizing: border-box;
            box-sizing: border-box;
            border: none;
            font-style: italic;
            color: #6b7173;
            line-height: 1.5 !important;
            display: block;
            text-align: center;
        }

        #liveAgentChatLogText .name {
            font-weight: 500 !important;
            font-size: .85em;
            line-height: 1.2;
            display: block;
            white-space: pre;
        }

        #liveAgentChatLogText p {
            /*line-height: 1.3 !important;*/
            /*font-weight: 200 !important; !*makes font thin *!*/
            /*font-size: 1em !important;*/
            -webkit-box-sizing: border-box;
            -moz-box-sizing: border-box;
            box-sizing: border-box;
            word-wrap: break-word;
            word-break: normal;
            -webkit-hyphens: auto;
            -moz-hyphens: auto;
            -ms-hyphens: auto;
            hyphens: auto;
        }

        #liveAgentChatLogText .bubble {
            position: relative;
            display: -moz-inline-stack;
            display: inline-block;
            margin: 0.2em 0em 0.4em 0em;
            padding: 8px 10px 8px 10px;
            border: 1px solid #E2E8ED;
            -moz-border-radius: 3px;
            border-radius: 3px;
            max-width: 90%;
        }

        #liveAgentChatLogText .operator, #liveAgentChatLogText .client, #liveAgentChatLogText .system {
            clear: both;
            position: relative;
            /*width: 100%;*/
            -webkit-box-sizing: border-box;
            -moz-box-sizing: border-box;
            box-sizing: border-box;
        }

        #liveAgentChatLogText .timestamp {
            margin-bottom: 10px;
            font-size: 0.75em;
            color: #929A9D;
            text-transform: uppercase;
            width: 100%;
            display: inline-block;
        }

        .spinner {
            margin: 20px auto 0;
            width: 70px;
            text-align: center;
        }

        .spinner > div {
            width: 18px;
            height: 18px;
            background-color: #D3DAE1;
            border-radius: 100%;
            display: inline-block;
            -webkit-animation: bouncedelay 1.4s infinite ease-in-out;
            animation: bouncedelay 1.4s infinite ease-in-out;
            -webkit-animation-fill-mode: both;
            animation-fill-mode: both;
        }

        .spinner .bounce1 {
            -webkit-animation-delay: -0.32s;
            animation-delay: -0.32s;
        }

        .spinner .bounce2 {
            -webkit-animation-delay: -0.16s;
            animation-delay: -0.16s;
        }

        @-webkit-keyframes bouncedelay {
            0%, 80%, 100% {
                -webkit-transform: scale(0.0)
            }
            40% {
                -webkit-transform: scale(1.0)
            }
        }

        @keyframes bouncedelay {
            0%, 80%, 100% {
                transform: scale(0.0);
                -webkit-transform: scale(0.0);
            }
            40% {
                transform: scale(1.0);
                -webkit-transform: scale(1.0);
            }
        }

        /* START Alert Styles */
        s
        .liveAgentAlert, .liveAgentMessage {
            width: 75%;
            margin: 0 auto;
            padding: 1px 14px;
            line-height: 15px;
        }

        .liveAgentAlert button {
            visibility: hidden;
        }

        /* END Alert Styles */

    </style>
    <script type='text/javascript'>

        liveagent.addEventListener(liveagent.chasitor.Events.CHAT_REQUEST_SUCCESSFUL, capture_email);
        liveagent.addEventListener(liveagent.chasitor.Events.CHAT_ESTABLISHED, start_chat_completed_flow);
        liveagent.addEventListener(liveagent.chasitor.Events.CHASITOR_IDLE_TIMEOUT, save_lead);
        liveagent.addEventListener(liveagent.chasitor.Events.AGENT_DISCONNECTED, save_lead);
        liveagent.addEventListener(liveagent.chasitor.Events.CHAT_REQUEST_FAILED, save_lead);
        liveagent.addEventListener(liveagent.chasitor.Events.CONNECTION_ERROR, save_lead);
        // liveagent.addEventListener(liveagent.chasitor.Events.AGENT_CHAT_TRANSFERRED, newagent);
        window.onbeforeunload = save_lead;

        var prechatEmail, prechatReferrer;
        var isEstablished = false;

        /**
         * From the chat details JSON object, capture some prechat information
         * @method get_prechat_details
         * @param {Object} details JSON object of the chat details
         */
        function get_prechat_details(details) {
            // console.debug("MEW1")
            for (var key in details) {
                if (key === 'prechatDetails') {
                    var prechatDetails = details[key];
                    for (var i = 0; i < prechatDetails.length; i++) {
                        if (prechatDetails[i]["label"] === "Email") {
                            prechatEmail = prechatDetails[i]["value"];
                        }

                        if (prechatDetails[i]["label"] === "Referrer") {
                            prechatReferrer = prechatDetails[i]["value"];
                        }
                    }
                }
            }
        }

        /**
         * Capture the user's email address in case they close chat prematurely
         * @method capture_email
         */
        function capture_email() {
            var details = liveagent.chasitor.getDetails();
            get_prechat_details(details);
            // console.debug("Captured Email: " + prechatEmail);
            // console.debug(JSON.stringify(details));
        }

        /**
         * * Verify whether the user has a lead or contact record
         * @method check_if_lead_or_contact
         */
        var run_count = 0;

        function check_if_lead_or_contact() {
            isEstablished = true;

            // Exit after 100 runs so as to not loop indefinitely
            if (run_count === 100)
                return;

            // Increment run count
            console.debug("Run: " + run_count);
            run_count += 1;

            if (prechatEmail !== null) {
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.LiveChatRemoter.waitForContactOrLeadCreation}', prechatEmail, function (result, event) {
//                        console.debug("MEWMEW");
                        console.debug("isContactOrLead Result: " + event.result);
                        if (event.result) {
                            start_chat_completed_flow();
                        }
                        else {
                            setTimeout(check_if_lead_or_contact(), 1000);
                        }
                    }, {escape: true}
                );
            }
        }

        /**
         * After agent accepts chat, initiate the Chat Completed Flow in SFDC
         * @method new_agent
         */
        function start_chat_completed_flow() {
            var newagentId;
            var details = liveagent.chasitor.getDetails();

            // Get the userID of the agent from the details JSON
            for (var key in details) {
                if (key === 'agent') {
                    newagentId = details[key].userId;
                }

            }

            // console.debug("AgentID: " + newagentId);
            // console.debug("Prechat Email: " + prechatEmail);
            // console.debug("Referrer URL: " + prechatReferrer);

            if (newagentId !== null && prechatEmail !== null) {
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.LiveChatRemoter.startChatCompletedFlow}', prechatEmail, newagentId, prechatReferrer, function (result, event) {
//                        console.debug("MEWMEWMEW");
                        console.debug("Flow Event Result: " + event.result);
                    }, {escape: true}
                );
            }
        }

        /**
         * Before user closes the window, save their email as a new Lead if not already one
         * @method save_lead
         */
        function save_lead() {
            console.debug("isEstablished: " + isEstablished);
            if (!isEstablished) {
                console.debug("Email: " + prechatEmail);
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.LiveChatRemoter.captureLostLead}', prechatEmail, function (result, event) {
                        if (event.result) {
                            console.debug("ContactID: " + event.result.ContactID);
                            console.debug("LeadID: " + event.result.LeadID);

//                            if (event.result.ContactID)
//                                liveagent.chasitor.addEntity('Contact', 'true', null, null, event.result.ContactID);
//                            if (event.result.LeadID)
//                                liveagent.chasitor.addEntity('Lead', 'true', null, null, event.result.LeadID);
                        }
                    }, {escape: true}
                );

            }
//            return true;
        }

    </script>

    <div style="top: 0; left: 0; right: 0; bottom: 0; position: absolute;">
        <div class="content" style="background:#0e2947;display:inline-block;width:100%;">
            <img style="margin:.75em auto .75em auto;" src="https://www.smartsheet.com/sites/default/files/2019-04/smartsheet-logo-white.svg" alt="Smartsheet"/>
        </div>
        <!--<img src="https://d2myx53yhj7u4b.cloudfront.net/sites/default/files/haymaker/smartsheet-logo-navy-horizontal.png" alt="Smartsheet"-->
             <!--style="height: 50px; width: auto; top: 5px;"/>-->
        <liveAgent:clientChat >
            <div style="top: 70px; left: 5px; right: 5px; bottom: 5px; position: absolute; z-index: 0;">
                <!--<a href='https://www.smartsheet.com'>blah</a>-->
                <liveAgent:clientChatAlertMessage agentsUnavailableLabel="Your chat request has been canceled because no agents are currently available."/>
                <liveAgent:clientChatStatusMessage />
                <table id="waitingMessage" cellpadding="0" cellspacing="0">
                    <tr style="height: 75%">
                        <td>
                            <div class="spinner">
                                <div class="bounce1"></div>
                                <div class="bounce2"></div>
                                <div class="bounce3"></div>
                            </div>
                            Please hold while we connect you to an agent.
                        </td>
                    </tr>
                    <tr>
                        <td/>
                    </tr>
                </table>
                <div style="top: 0; right: 0; bottom: 41px; left: 0; padding: 0; position: absolute; word-wrap: break-word; z-index: 0;">
                    <liveAgent:clientChatLog agentTypingLabel="The agent is typing..." showTimeStamp="true"/>
                </div>
                <div style="bottom: 35px; position: absolute; z-index: 0;">
                    <liveAgent:clientChatSaveButton />
                    <liveAgent:clientChatEndButton />
                </div>
                <div style="position: absolute; height: auto; right: 0; bottom: 0; left: 0; margin-right: 67px;">
                    <liveagent:clientChatInput />
                    <liveAgent:clientChatSendButton />
                </div>
            </div>
        </liveAgent:clientChat>
    </div>
</apex:page>